---
- set_fact:
    server_groups="{{ groups.keys()  | map('regex_search','damp.*') | select('string') | list }}"

- name: Install MySQL-server for Orchestrator
  apt:
    name: mysql-server-5.7
    state: present
    update_cache: yes
    cache_valid_time: 3600

- name: Add a lightweight mysqld.conf
  template:
    src=mysqld.cnf.j2
    dest=/etc/mysql/mysql.conf.d/mysqld.cnf
    owner=root
    mode=0775

- name: Start MySQL
  service:
    name=mysql
    state=started
    enabled=yes

- name: Ensure mysql root password is updated for all root accounts
  mysql_user:
    name: root
    host: "{{ item }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    password: "{{ orchestrator.mysql.passwd }}"
    priv: '*.*:ALL,GRANT'
    check_implicit_admin: true
  loop: "{{ orchestrator.mysql.hosts }}"
  become: yes

- name: Restart MySQL
  service:
    name=mysql
    state=restarted
    enabled=yes

- name: Create `/root/.my.cnf` with root password credentials
  template:
    src:  my.cnf.j2
    dest: /root/.my.cnf
    owner: root
    mode: 0600
  become: yes

- name: Install Orchestrator 3.1.2
  apt: >
    deb=https://github.com/github/orchestrator/releases/download/v3.1.2/orchestrator-sysv-3.1.2_amd64.deb

- name: crate symlink to the binary
  file:
    src=/usr/local/orchestrator/orchestrator
    dest=/usr/local/bin/orchestrator
    state=link

- name: Generate Orchestrator config
  template:
    src: orchestrator-sample.conf.json.j2
    dest: /usr/local/orchestrator/orchestrator.conf.json
    owner: root
    mode: 0600

- name: Create a new database orchestrator
  mysql_db:
    name: orchestrator
    state: present

- name: Start Orchestrator
  service:
    name=orchestrator
    state=started
    enabled=yes

- wait_for: host=127.0.0.1 port={{ orchestrator.port }} delay=3 state=started

- name: Add servers to orchestrator
  shell: orchestrator --config /usr/local/orchestrator/orchestrator.conf.json -c discover -i {{ hostvars[item]['inventory_hostname'] }}:3306 cli
  with_inventory_hostnames: all:!proxysql
